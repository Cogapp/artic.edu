// @mixin float-clear
@mixin float-clear() {
  &::after {
    content: '.';
    display: block;
    clear: both;
    height: 0;
    line-height: 0;
    overflow: hidden;
    visibility: hidden;
  }
}

// @mixin background-fill
@mixin background-fill {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 100vw;
    margin-left: -50vw;
    background-color: inherit;
    pointer-events: none;
  }
}


// @mixin keyline-fill
@mixin keyline-full($position:top, $color:$color__black) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    z-index: 0;
    left: 50%;
    @if $position == top {
      bottom: 100%;
    } @else {
      top: 100%;
    }
    width: 100vw;
    margin-left: -50vw;
    border-top: 1px solid $color;
    pointer-events: none;
  }
}

@mixin opaqueBg() {
  border-bottom: 1px solid rgba(0,0,0,.1);
  background-color: rgba(255,255,255,.95);
  background-clip: padding-box;

  @supports (backdrop-filter: blur(5px)) or (-webkit-backdrop-filter: blur(5px)) {
    background-color: rgba(255,255,255,.85);
    -webkit-backdrop-filter: blur(5px);
    backdrop-filter: blur(5px);
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin tucked-margin-top($font-obj, $distances, $single-bp: false) {
  $settings: false;
  $line-height: 0;
  $margin: 0;
  $push: 0;
  $new-line-height: 0;
  $new-margin: 0;
  $new-push: 0;
  @if $font-obj {
    $settings: map-get($font-obj, settings);
  }
  @if $settings {
    @each $name, $point in $breakpoints-with-directions {
      // first see if font settings has a line height for this breakpoint
      @if map-has-key($settings, $name) {
        $settings-at-breakpoint: map-get($settings, $name);
        @if map-has-key($settings-at-breakpoint, line-height) {
          $new-line-height: map-get($settings-at-breakpoint, line-height);
        }
        @if map-has-key($settings-at-breakpoint, push) {
          $new-push: map-get($settings-at-breakpoint, push);
        }
      }
      // now see if a margin was specified for this breakpoint
      @if map-has-key($distances, $name) {
        $new-margin: map-get($distances, $name);
      }
      // now set the margin top
      @if ($new-margin != $margin or $new-line-height != $line-height or $new-push != $push) {
        $line-height: $new-line-height;
        $margin: $new-margin;
        $push: $new-push;
        @if ($name == 'xsmall' or $single-bp == $name) {
          margin-top: #{$margin - $line-height}px;
        } @else {
          @include breakpoint(#{$name}) {
            margin-top: #{$margin - $line-height}px;
          }
        }
      }
    }
  }
}

@mixin tucked-align-top($font-obj, $single-bp: false) {
  $settings: false;
  $pull: 0;
  $new-pull: 0;
  @if $font-obj {
    $settings: map-get($font-obj, settings);
  }
  @if $settings {
    @each $name, $point in $breakpoints-with-directions {
      // first see if font settings has a line height for this breakpoint
      @if map-has-key($settings, $name) {
        $settings-at-breakpoint: map-get($settings, $name);
        @if map-has-key($settings-at-breakpoint, pull) {
          $new-pull: map-get($settings-at-breakpoint, pull);
        }
      }
      // now set the margin top
      @if ($new-pull != $pull) {
        $pull: $new-pull;
        $base-height-into-pull: round($pull / $base-height); // round or floor? erm
        // round will be closer but has the risk of drawing too much negative margin
        $margin-top: 0 - ($base-height-into-pull * $base-height);
        @if ($name == 'xsmall' or $single-bp == $name) {
          margin-top: #{$margin-top}px;
        } @else {
          @include breakpoint(#{$name}) {
            margin-top: #{$margin-top}px;
          }
        }
      }
    }
  }
}
